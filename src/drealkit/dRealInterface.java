package honeybee.drealkit;

import java.util.*;
import java.io.*;
import manticore.dl.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.*;


public class dRealInterface  {

    public static SMTResult query ( dLFormula thisFormula ) throws Exception {

	SMTResult result = new SMTResult();
	
	File queryFile = writeQueryFile( thisFormula );
	
	ProcessBuilder queryPB = new ProcessBuilder("dReal", "--model", "--precision=0.00001", queryFile.getAbsolutePath() );
	queryPB.redirectErrorStream( true );
	Process queryProcess = queryPB.start();
	BufferedReader dRealSays = new BufferedReader( new InputStreamReader(queryProcess.getInputStream()) );

	String line;
	if ( (line = dRealSays.readLine()) != null ) {
	    if ( line.equals("unsat")) {
		result.isValid = true;
		result.valuation = new Valuation();
	    } else if ( line.equals("sat") ) {
		result.isValid = false;
		result.valuation = extractModel( new File( queryFile.getAbsolutePath() + ".model") );
	    } else {
		throw new Exception( line );
	    }
	} else {
	    throw new Exception("dReal returned no output!");
	}

	return result;
	
    }

    public static Valuation extractModel( File modelFile ) throws Exception {
	Valuation model = new Valuation();

	BufferedReader modelReader = new BufferedReader( new FileReader(modelFile) );

	modelReader.readLine();
	String line;
	while( (line = modelReader.readLine()) != null ) {

		line = line.trim();
		String[] tokens = line.split("\\s+");

		RealVariable variable = new RealVariable( tokens[0] );
		String lowerBound = tokens[2].replace("[","").replace(",","");
		String upperBound = tokens[3].replace("]","");

		//System.out.println("l: " + lowerBound + ", u: " + upperBound );

		Double lvalue; Double uvalue;
		try {
			lvalue = (Double)(Double.parseDouble( lowerBound ));
			if ( lvalue.equals( Double.parseDouble("-Infinity") ) ) { lvalue = new Double(0); }
			if ( lvalue.equals( Double.parseDouble( "Infinity") ) ) { lvalue = new Double(0); }

		} catch ( NumberFormatException e ) {
			System.out.println("Lower bound was: " + lowerBound + ", replacing with 0");
			lvalue = new Double(0);
		}
		try {
			uvalue = (Double)(Double.parseDouble( upperBound ));
			if ( uvalue.equals( Double.parseDouble("-Infinity") ) ) { uvalue = new Double(0); }
			if ( uvalue.equals( Double.parseDouble( "Infinity") ) ) { uvalue = new Double(0); } 
		} catch ( NumberFormatException e ) {
			System.out.println("Lower bound was: " + upperBound + ", replacing with 0");
			uvalue = new Double(0);
		}
		System.out.println("lval: " + lvalue + "uval: " + uvalue);

		model.put(variable, new Real( (lvalue + uvalue)/2 ));
	}
	
	//System.out.println("model : " + model.toString() );
	return model;
    }


    public static File writeQueryFile( dLFormula thisFormula ) throws Exception {
	String queryString = "(set-logic QF_NRA)\n\n";

	Iterator<RealVariable> variableIterator = thisFormula.getVariables().iterator();
	queryString = queryString + "\n;; Variable declarations\n";
	RealVariable thisVariable;
	while ( variableIterator.hasNext() ) {
	    queryString = queryString + "(declare-fun " + variableIterator.next() + " () Real )\n";
	}

	queryString = queryString + "\n;; Negated formula\n";
	NotFormula negatedFormula = new NotFormula( thisFormula );
	queryString = queryString + "(assert " + negatedFormula.todRealString() + " )\n";

	queryString = queryString + "\n(check-sat)\n(exit)\n";


	File drealworkspacedir = new File("drealworkspace");
	if (!drealworkspacedir.exists()) {
	    drealworkspacedir.mkdir();
	}

	double randomID = Math.round(Math.random());
	Date date = new Date();
	String filename = "drealworkspace/query." + date.getTime() + "." + randomID + ".smt2";
	PrintWriter queryFile = new PrintWriter( filename );
	queryFile.println(";; Automatically generated by HoneyBee on " + date.toString() + "\n");
	queryFile.println(";; Assertion is " + negatedFormula.toMathematicaString() + "\n\n");
	queryFile.println( queryString );
	queryFile.close();

	return new File( filename );
	
    }
    
    public static void writeSingleRefinementVerificationQuery(
							      ArrayList<RealVariable> statevariables,
							      ArrayList<RealVariable> eiparameters,
							      dLFormula envelope,
							      dLFormula invariant,
							      dLFormula robustparameters,
							      ConcreteAssignmentProgram controllaw ) {


	System.out.println("TODO: This function should probably throw an exception (dRealInterface.writeSingleRefinementVerificationQuery");
	String refinementQuery = "(set-logic QF_NRA)\n\n";
	
	Iterator<RealVariable> stateVariableIterator = statevariables.iterator();
	refinementQuery = refinementQuery + "\n;; State variable declaration\n";
	RealVariable thisStateVariable;
	while ( stateVariableIterator.hasNext() ) {
	    thisStateVariable = stateVariableIterator.next();
	    refinementQuery = refinementQuery + "(declare-fun " + thisStateVariable.todRealString() + " () Real)\n";
	}

	Iterator<RealVariable> controlVariableIterator = controllaw.getVariables().iterator();
	refinementQuery = refinementQuery + "\n;; Control variable declaration\n";
	RealVariable thisControlVariable;
	while ( controlVariableIterator.hasNext() ) {
	    thisControlVariable = controlVariableIterator.next();
	    refinementQuery = refinementQuery + "(declare-fun " + thisControlVariable.todRealString() + " () Real)\n";
	}

	System.out.println("INFO: drealkit requires robustparameter set to be a singleton (cannot evaluate Exists[ Forall[] ]  queries)");
	System.out.println("INFO: Checking this is difficult, so you may get a very cryptic error if this condition is not met");
	Iterator<RealVariable> eiparameteriterator = eiparameters.iterator();
	refinementQuery = refinementQuery + "\n;; Envelope-invariant parameter declaration\n";
	RealVariable thisEIParameter;
	while ( eiparameteriterator.hasNext() ) {
	    thisEIParameter = eiparameteriterator.next();
	    refinementQuery = refinementQuery + "(declare-fun " + thisEIParameter.todRealString() + " () Real)\n";
	}

	refinementQuery = refinementQuery + "\n;; Assert the invariant\n";
	refinementQuery = refinementQuery + "(assert " + invariant.todRealString() + " )\n";
	
	refinementQuery = refinementQuery + "\n;; Assert the controllaw\n";
	refinementQuery = refinementQuery + "(assert " + controllaw.todRealString() + " )\n";

	refinementQuery = refinementQuery + "\n;; Assert the NEGATION of the envelope (remember how dReal works!)\n";
	NotFormula negatedEnvelope = new NotFormula( envelope );
	refinementQuery = refinementQuery + "(assert " + negatedEnvelope.todRealString() + " )\n";
	
	refinementQuery = refinementQuery + "\n(check-sat)\n(exit)\n";

	try {

	    File drealworkspacedir = new File("drealworkspace");
	    if (!drealworkspacedir.exists()) {
		drealworkspacedir.mkdir();
	    }

	    PrintWriter queryFile = new PrintWriter("drealworkspace/refinementVerificationQueryFile.smt2");
	    Date date = new Date();
	    queryFile.println(";; Automatically generated by HoneyBee on " + date.toString() + "\n\n");
	    queryFile.println( refinementQuery );
	    queryFile.close();

	} catch ( Exception e ) {
	    e.printStackTrace();
	}


	
    }

    public static void getParameterValues( ValuationList oldValues, dLFormula robustparameters ) {
	System.out.println("ladeeda");
    }


    public static void writeSingleRefinementSynthesisQuery(
							   ArrayList<RealVariable> statevariables,
							   ArrayList<RealVariable> eiparameters,
							   dLFormula envelope,
							   dLFormula invariant,
							   dLFormula robustparameters,
							   ConcreteAssignmentProgram controltemplate ) {
	System.out.println("ladeeda");
    }
    
    
}
